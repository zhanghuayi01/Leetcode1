class Solution(object):
    def updateBoard(self, board, click):
        """
        :type board: List[List[str]]
        :type click: List[int]
        :rtype: List[List[str]]
        """
        def pureblank(i,j):
            if ((i+1 >= len(board) or board[i+1][j] != 'M') and (j+1 >= len(board[i]) or board[i][j+1] != 'M')
                and (i-1 < 0 or board[i-1][j] != 'M') and (j-1 < 0 or board[i][j-1] != 'M')
                and (i-1 < 0  or j-1 < 0 or board[i-1][j-1] != 'M')
                and (i+1 >= len(board) or j-1 < 0 or board[i+1][j-1] != 'M')
                and (i-1 < 0 or j+1 >= len(board[0]) or board[i-1][j+1] != 'M')
                and (i+1 >= len(board) or j+1 >= len(board[0]) or board[i+1][j+1] != 'M')
               ): return True
            else: return False
            
        def countmines(i,j):
            res = 0
            if (i+1 < len(board) and board[i+1][j] == 'M'): res+= 1
            if (j+1 < len(board[i]) and board[i][j+1] == 'M'): res += 1
            if (i-1 > -1 and board[i-1][j] == 'M'): res += 1
            if (j-1 > -1 and board[i][j-1] == 'M'): res += 1
            if (i-1 > -1  and j-1 > -1 and board[i-1][j-1] == 'M'): res += 1
            if (i+1 < len(board) and j-1 > -1 and board[i+1][j-1] == 'M'): res += 1
            if (i-1 > -1 and j+1 < len(board[0]) and board[i-1][j+1] == 'M'): res += 1
            if (i+1 < len(board) and j+1 < len(board[0]) and board[i+1][j+1] == 'M'): res += 1
            return res
        
        def dfs(visited,click):
            if click[0] >= len(board) or click[0]<0 or click[1]>= len(board[0]) or click[1]<0: return
            if visited[click[0]][click[1]]: return
            visited[click[0]][click[1]] = 1
            if board[click[0]][click[1]] == 'M':
                board[click[0]][click[1]] = 'X'
            elif not pureblank(click[0],click[1]):
                board[click[0]][click[1]] = str(countmines(click[0],click[1]))
            else:
                board[click[0]][click[1]] = 'B'
                dfs(visited,[click[0]-1,click[1]])
                dfs(visited,[click[0]+1,click[1]])
                dfs(visited,[click[0],click[1]-1])
                dfs(visited,[click[0],click[1]+1])
                dfs(visited,[click[0]-1,click[1]+1])
                dfs(visited,[click[0]-1,click[1]-1])
                dfs(visited,[click[0]+1,click[1]-1])
                dfs(visited,[click[0]+1,click[1]+1])
                
                
            return
        visited = [[0]*len(board[0]) for _ in range(len(board))]
        dfs(visited,click)
        return board
