# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        self.s = ''
        if not root: return
        queue = [root]
        count = 1
        while count:
            count = 0
            for node in queue:
                if node:
                    self.s += str(node.val)+','
                    count += 1
                else: self.s += '#,'
            tqueue = []
            for node in queue:
                if node:
                    tqueue += [node.left,node.right]
            queue = tqueue
        print self.s
        return self.s
        
            
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not self.s: return
        lst = self.s.split(',')
        root = TreeNode(int(lst[0]))
        queue = [root]
        i = 1
        while i < len(lst[:-1]):
            tqueue = []
            for node in queue:
                if node:
                    if lst[i] != "#":
                        node.left = TreeNode(int(lst[i]))
                        i += 1
                    else:
                        node.left = None
                        i += 1
                    if lst[i] != "#":
                        node.right = TreeNode(int(lst[i]))
                        i += 1
                    else:
                        node.right = None
                        i += 1
                    tqueue += [node.left,node.right]
            if not any(tqueue): break
            queue = tqueue
        return root
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
