# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        def helper(n1,n2):
            while n1 != n2:
                n1 = n1.next
                n2 = n2.next
            return n1
        l1 = l2 = 0
        n1,n2 = headA,headB
        while n1:
            l1 += 1
            n1 = n1.next
        while n2:
            l2 += 1
            n2 = n2.next
        n1,n2 = headA,headB
        if l1 > l2:
            for _ in range(l1-l2):
                n1 = n1.next
        else:
            for _ in range(l2-l1):
                n2 = n2.next
        return helper(n1,n2)
