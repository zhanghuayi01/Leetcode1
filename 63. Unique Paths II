class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        n = len(obstacleGrid[0])
        m = len(obstacleGrid)
        obstacleGrid[0][0] = 1 - obstacleGrid[0][0]
            
        if obstacleGrid[0][0] == 0:
            return 0
        
        for i in range(1,m):
            if not obstacleGrid[i][0]:
                obstacleGrid[i][0] = obstacleGrid[i-1][0]
            else:
                obstacleGrid[i][0] = 0
                
        for j in range(1,n):
            if not obstacleGrid[0][j]:
                obstacleGrid[0][j] = obstacleGrid[0][j-1]
            else:
                obstacleGrid[0][j] = 0
                
        for i in range(1,m):
            for j in range(1,n):
                if not obstacleGrid[i][j]:
                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]
                else:
                    obstacleGrid[i][j] = 0
                    
        return obstacleGrid[-1][-1]
